apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.3'
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

dependencies {
    compile project (':falcon-common')
    compile project (':falcon-db')
    compile project (':falcon-security')
    compile "com.google.appengine:appengine-api-1.0-sdk:+"
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.springframework.ws:spring-ws-core:3.0.1.BUILD-SNAPSHOT'

    compile 'jstl:jstl:1.2'
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.33'
    testCompile 'org.mockito:mockito-all:1.10.19'

    testCompile 'com.google.appengine:appengine-testing:+'
    testCompile 'com.google.appengine:appengine-api-stubs:+'
    testCompile 'com.google.appengine:appengine-tools-sdk:+'
}

// Always run unit tests
appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {  // App Engine tasks configuration
  run {
  }
  deploy {   // deploy configuration
      version = 'v3-0-0'
      project = "falcon-sca"
      promote = false
      stopPreviousVersion = false
  }
}

test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
     logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
     logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}
group   = "org.calontir.marshallate.falcon"        // Generated output GroupId
// version = "1.0-SNAPSHOT"       // Version in generated output

sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Ja
