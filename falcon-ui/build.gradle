apply plugin: 'war'
apply plugin: 'gwt'
apply plugin: 'com.google.cloud.tools.appengine'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.3'
        classpath 'org.wisepersist:gwt-gradle-plugin:+'
    }
}

gwt {
    gwtVersion='2.8.2'
    modules 'org.calontir.marshallate.falcon.Fighter'
    minHeapSize = "512M";
    maxHeapSize = "1024M";
    compiler {
        style = 'DETAILED'
    }
    dependencies {
        gwt files(project(':falcon-db').sourceSets.main.java.srcDirs)
        gwt files(project(':falcon-common').sourceSets.main.java.srcDirs)
        gwt group: 'org.gwtbootstrap3', name: 'gwtbootstrap3', version: '0.9'
    }
}


if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

dependencies {
    compile project (':falcon-common')
    compile project (':falcon-db')
    compile project (':falcon-security')
    compile project (':falcon-print')
    compile group: 'com.google.gwt', name: 'gwt-servlet', version: '2.8.2'
    compile group: 'com.google.gwt', name: 'gwt-user', version: '2.8.2'
    compile "com.google.appengine:appengine-api-1.0-sdk:+"
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'jstl:jstl:1.2'
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.33'
    testCompile 'org.mockito:mockito-all:1.10.19'

    testCompile 'com.google.appengine:appengine-testing:+'
    testCompile 'com.google.appengine:appengine-api-stubs:+'
    testCompile 'com.google.appengine:appengine-tools-sdk:+'
    //gwt  project: ':falcon-db', classifier: 'sources'
}

task cpData {
    if (!file("./build/exploded-falcon-ui/WEB-INF/appengine-generated/local_db.bin").exists()) {
        logger.lifecycle("Copying test data")
        copy {
            from 'src/test/resources/local_db.bin'
            into 'build/exploded-falcon-ui/WEB-INF/appengine-generated/'
        }
    }
}

// Always run unit tests
appengineDeploy.dependsOn test
appengineStage.dependsOn test
appengineRun.shouldRunAfter cpData
appengineStart.shouldRunAfter cpData

appengine {  // App Engine tasks configuration
  run {
    port = 8080
  }
  deploy {   // deploy configuration
      version = 'v4-0-1'
      project = "falcon-sca"
      promote = false
      stopPreviousVersion = false
  }
}

test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
     logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
     logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}
group   = "org.calontir.marshallate.falcon"        // Generated output GroupId
// version = "1.0-SNAPSHOT"       // Version in generated output

sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Ja
